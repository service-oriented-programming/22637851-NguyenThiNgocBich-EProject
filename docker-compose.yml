name: CI/CD Pipeline (NodeJS Microservices)

on:
  push:
    branches: [ "main" ]

jobs:
  ci_cd_pipeline:
    runs-on: self-hosted

    steps:
      # Step 1: Checkout source code
      - uses: actions/checkout@v4

      # Step 2: Clean old Docker environment
      - name: Clean old Docker environment
        shell: powershell
        run: |
          Write-Host "Cleaning Docker environment..."
          docker ps -aq | ForEach-Object { docker stop $_; docker rm -f $_ }
          docker network prune -f
          docker volume prune -f
          docker system prune -af

      # Step 3: Login DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Generate docker-env file (đúng tên dùng trong docker-compose)
      - name: Generate docker-env file
        shell: powershell
        run: |
          $envFile = @"
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI }}
          MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}
          MONGODB_ORDER_URI=${{ secrets.MONGODB_ORDER_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          RABBITMQ_URI=${{ secrets.RABBITMQ_URI }}
          RABBITMQ_QUEUE=${{ secrets.RABBITMQ_QUEUE }}
          AUTH_SERVICE_URL=${{ secrets.AUTH_SERVICE_URL }}
          AUTH_PORT=${{ secrets.AUTH_PORT }}
          PRODUCT_PORT=${{ secrets.PRODUCT_PORT }}
          ORDER_PORT=${{ secrets.ORDER_PORT }}
          API_GATEWAY_PORT=${{ secrets.API_GATEWAY_PORT }}
          "@
          $envFile | Out-File -Encoding ascii -FilePath docker-env

      # Step 5: Build & run containers
      - name: Build and start containers
        shell: powershell
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker compose -p eproject down -v --remove-orphans
          docker compose -p eproject up -d --build

      # Step 6: Wait for MongoDB & RabbitMQ to start
      - name: Wait for MongoDB & RabbitMQ
        shell: powershell
        run: |
          Write-Host "Waiting for MongoDB & RabbitMQ to be ready..."
          Start-Sleep -Seconds 15
          docker ps

      # Step 7: Test API Health
      - name: Test API Health
        shell: bash
        run: bash ./test_api.sh

      # Step 8: Push images to DockerHub
      - name: Push images to DockerHub
        shell: powershell
        run: docker compose -p eproject push