name: CI/CD Pipeline (NodeJS Microservices)

on:
  push:
    branches: [ "main" ]

jobs:
  ci_cd_pipeline:
    runs-on: self-hosted

    steps:
      # Step 1: Checkout source code
      - uses: actions/checkout@v4

      # Step 2: Allow PowerShell scripts
      - name: Allow PowerShell scripts
        run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
        shell: powershell

      # Step 3: Clean old Docker environment
      - name: Clean old Docker environment
        shell: powershell
        run: |
          Write-Host "Stopping all containers..."
          docker ps -aq | ForEach-Object { docker stop $_; docker rm -f $_ }
          docker network prune -f
          docker volume prune -f
          docker system prune -af
          Write-Host "Docker environment cleaned up!"

      # Step 4: Login DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 5: Generate env file for Docker Compose
      - name: Generate env file for Docker Compose
        shell: powershell
        run: |
          $envFile = @"
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          MONGODB_PRODUCT_URI=${{ vars.MONGODB_PRODUCT_URI }}
          MONGODB_ORDER_URI=${{ vars.MONGODB_ORDER_URI }}
          MONGODB_AUTH_URI=${{ vars.MONGODB_AUTH_URI }}
          JWT_SECRET=${{ vars.JWT_SECRET }}
          AUTH_SERVICE_URI=${{ vars.AUTH_SERVICE_URI }}
          RABBITMQ_URI=${{ vars.RABBITMQ_URI }}
          RABBITMQ_QUEUE=${{ vars.RABBITMQ_QUEUE }}
          PRODUCT_PORT=${{ vars.PRODUCT_PORT }}
          ORDER_PORT=${{ vars.ORDER_PORT }}
          AUTH_PORT=${{ vars.AUTH_PORT }}
          API_GATEWAY_PORT=${{ vars.API_GATEWAY_PORT }}
          "@
          $envFile | Out-File -Encoding ascii -FilePath docker-env
          Write-Host "Env file generated!"

      - name: Cleanup old containers
        shell: powershell
        run: |
          try {
            docker compose -p eproject down -v --remove-orphans
          } catch {
            Write-Host "No containers to remove. Continue..."
          }
          docker system prune -f

      - name: Free occupied ports
        shell: powershell
        run: |
          Write-Host "Checking and freeing ports..."
          $ports = @(3001, 3002, 3003, 3004, 3005)
          foreach ($p in $ports) {
            $portPid = (Get-NetTCPConnection -LocalPort $p -ErrorAction SilentlyContinue).OwningProcess
            if ($portPid) {
              Write-Host "Port $p in use by PID $portPid. Killing..."
              Stop-Process -Id $portPid -Force
            } else {
              Write-Host "Port $p is free."
            }
          }

      # Step 6: Build & run services
      - name: Build and start services
        shell: powershell
        run: |
          Write-Host "Building images without cache..."
          docker compose --env-file docker-env -p eproject build --no-cache

          Write-Host "Starting services..."
          docker compose --env-file docker-env -p eproject up -d

          Write-Host "Services built and started!"
      
      # Step 6.5: Debug Docker logs
      - name: Debug Docker logs
        shell: powershell
        run: |
          Write-Host "====== AUTH LOG ======"
          docker logs auth-service | Select-Object -First 50
          Write-Host "====== GATEWAY LOG ======"
          docker logs api-gateway | Select-Object -First 50

      # Step 7: Wait for MongoDB & RabbitMQ
      - name: Wait for MongoDB & RabbitMQ
        shell: powershell
        run: |
          Write-Host "Waiting for MongoDB & RabbitMQ..."
          Start-Sleep -Seconds 15
          docker ps

      # Step 8: Test API (Health Check)
      - name: Test API Health
        shell: powershell
        run: |
          Write-Host "Waiting for API Gateway to become healthy..."
          for ($i = 0; $i -lt 6; $i++) {
            try {
              $response = Invoke-RestMethod -Uri "http://localhost:3003/health" -TimeoutSec 10
              Write-Host "API Healthy: $($response)"
              exit 0
            } catch {
              Write-Host "Retry $i: API not ready yet..."
              Start-Sleep -Seconds 15
            }
          }
          Write-Host "API health check failed after multiple attempts."
          exit 1

      # Step 9: Push image lÃªn DockerHub
      - name: Push images to DockerHub
        shell: powershell
        run: docker compose -p eproject push