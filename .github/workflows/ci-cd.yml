name: CI/CD Pipeline (NodeJS Microservices)

on:
  push:
    branches: [ "cicd" ]

jobs:
  ci_cd_pipeline:
    runs-on: self-hosted

    steps:
      # Step 1: Checkout source code
      - uses: actions/checkout@v4

      # Step 2: Allow PowerShell scripts
      - name: Allow PowerShell scripts
        run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
        shell: powershell

      # Step 3: Clean project-specific Docker environment
      - name: Clean Docker environment
        shell: powershell
        run: |
          docker compose -p eproject down -v
          docker system prune -af

      # Step 4: Login DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 5: Generate env file for Docker Compose
      - name: Generate env file for Docker Compose
        shell: powershell
        run: |
          $envFile = @"
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          MONGODB_PRODUCT_URI=${{ vars.MONGODB_PRODUCT_URI }}
          MONGODB_ORDER_URI=${{ vars.MONGODB_ORDER_URI }}
          MONGODB_AUTH_URI=${{ vars.MONGODB_AUTH_URI }}
          JWT_SECRET=${{ vars.JWT_SECRET }}
          RABBITMQ_URI=${{ vars.RABBITMQ_URI }}
          RABBITMQ_QUEUE=${{ vars.RABBITMQ_QUEUE }}
          PRODUCT_PORT=${{ vars.PRODUCT_PORT }}
          ORDER_PORT=${{ vars.ORDER_PORT }}
          AUTH_PORT=${{ vars.AUTH_PORT }}
          API_GATEWAY_PORT=${{ vars.API_GATEWAY_PORT }}
          "@
          $envFile | Out-File -Encoding ascii -FilePath docker-env
          Write-Host "Env file generated!"

      - name: Free occupied ports
        shell: powershell
        run: |
          Write-Host "Checking and freeing ports..."
          $ports = @(3001, 3002, 3003, 3004, 3005)
          foreach ($p in $ports) {
            $portPid = (Get-NetTCPConnection -LocalPort $p -ErrorAction SilentlyContinue).OwningProcess
            if ($portPid) {
              Write-Host "Port $p in use by PID $portPid. Killing..."
              Stop-Process -Id $portPid -Force
            } else {
              Write-Host "Port $p is free."
            }
          }

      # Step 6: Install dependencies for all services
      - name: Install dependencies
        shell: powershell
        run: |
          Write-Host "Installing dependencies for all services..."
          cd auth
          npm install
          cd ..\product
          npm install
          cd ..\order
          npm install
          cd ..\api-gateway
          npm install
          cd ..
          Write-Host "Dependencies installed!"

      # Step 7: Run unit tests (before Docker build)
      - name: Run Unit Tests
        shell: powershell
        run: |
          Write-Host "Running unit tests..."
          cd auth
          npm test
          cd ..\product
          npm test
          cd ..\order
          npm test
          cd ..\api-gateway
          npm test
          cd ..
          Write-Host "All unit tests passed!"

      # Step 8: Build & run services
      - name: Build and start services
        shell: powershell
        run: |
          Write-Host "Building images without cache..."
          docker compose --env-file docker-env -p eproject build --no-cache

          Write-Host "Starting services..."
          docker compose --env-file docker-env -p eproject up -d

          Write-Host "Services built and started!"

      # Step 9: Wait for MongoDB & RabbitMQ
      - name: Wait for MongoDB & RabbitMQ
        shell: powershell
        run: |
          Write-Host "Waiting for MongoDB & RabbitMQ..."
          Start-Sleep -Seconds 15
          docker ps

      # Step 10: Test all services
      - name: Test Service Health
        shell: powershell
        run: |
          $services = @(
            @{Name="Auth"; Port="${{ vars.AUTH_PORT }}"; Path="/health"},
            @{Name="Product"; Port="${{ vars.PRODUCT_PORT }}"; Path="/health"},
            @{Name="Order"; Port="${{ vars.ORDER_PORT }}"; Path="/health"},
            @{Name="API Gateway"; Port="${{ vars.API_GATEWAY_PORT }}"; Path="/health"}
          )

          foreach ($service in $services) {
            $uri = "http://localhost:$($service.Port)$($service.Path)"
            Write-Host "Testing $($service.Name) service at $uri"
            
            for ($i = 0; $i -lt 6; $i++) {
              try {
                $response = Invoke-RestMethod -Uri $uri -TimeoutSec 10
                Write-Host "$($service.Name) healthy: $($response)"
                break
              } catch {
                Write-Host "Retry ${i}: $($service.Name) not ready..."
                Start-Sleep -Seconds 10
              }
            }
          }

      # Step 11: Push image to DockerHub
      - name: Push images to DockerHub
        shell: powershell
        run: docker compose --env-file docker-env -p eproject push