name: Node.js CI/CD

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  test-auth-service:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: auth/package-lock.json

      - name: Install dependencies
        working-directory: ./auth
        run: npm ci

      - name: Run tests
        working-directory: ./auth
        run: npm test

  test-product-service:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: product/package-lock.json

      - name: Install dependencies
        working-directory: ./product
        run: npm ci

      - name: Run tests
        working-directory: ./product
        run: npm test

  build-docker-images:
    runs-on: ubuntu-latest
    needs: [test-auth-service, test-product-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Auth Service Docker image
        working-directory: ./auth
        run: docker build -t auth-service:latest .

      - name: Build Product Service Docker image
        working-directory: ./product
        run: docker build -t product-service:latest .

      - name: Build Order Service Docker image
        working-directory: ./order
        run: docker build -t order-service:latest .

      - name: Build API Gateway Docker image
        working-directory: ./api-gateway
        run: docker build -t api-gateway:latest .

  docker-compose-test:
    runs-on: ubuntu-latest
    needs: [build-docker-images]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Docker Compose
        run: |
          docker-compose config
          echo "Docker Compose configuration is valid"